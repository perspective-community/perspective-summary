import { SplitPanel } from "@lumino/widgets";
import type { HTMLPerspectiveViewerElement, ViewerConfigUpdate } from "@finos/perspective-viewer";
import type * as psp from "@finos/perspective";
import { PerspectiveDockPanel } from "./dockpanel";
import { WorkspaceMenu } from "./menu";
import { PerspectiveViewerWidget } from "./widget";
import { ObservableMap } from "../utils/observable_map";
export interface PerspectiveLayout<T> {
    children?: PerspectiveLayout<T>[];
    widgets?: T[];
    sizes: number[];
}
export interface ViewerConfigUpdateExt extends ViewerConfigUpdate {
    table: string;
}
export interface PerspectiveWorkspaceConfig<T> {
    sizes: number[];
    master: PerspectiveLayout<T>;
    detail: PerspectiveLayout<T>;
    viewers: Record<string, ViewerConfigUpdateExt>;
}
export declare class PerspectiveWorkspace extends SplitPanel {
    private dockpanel;
    private detailPanel;
    private masterPanel;
    element: HTMLElement;
    menu_elem: HTMLElement;
    private _tables;
    private listeners;
    private indicator;
    private commands;
    private _menu?;
    private _minimizedLayoutSlots?;
    private _minimizedLayout?;
    private _maximizedWidget?;
    private _last_updated_state?;
    constructor(element: HTMLElement);
    get_context_menu(): WorkspaceMenu | undefined;
    get_dock_panel(): PerspectiveDockPanel;
    init_indicator(): HTMLElement;
    apply_indicator_theme(): void;
    /***************************************************************************
     *
     * `<perspective-workspace>` Public API
     *
     */
    addTable(name: string, table: Promise<psp.Table>): void;
    getTable(name: string): psp.Table | Promise<psp.Table>;
    removeTable(name: string): boolean;
    replaceTable(name: string, table: Promise<psp.Table>): void;
    get tables(): ObservableMap<string, psp.Table | Promise<psp.Table>>;
    save(): Promise<{
        viewers: Record<string, ViewerConfigUpdate>;
        sizes: number[];
        detail: import("@lumino/widgets").DockLayout.ILayoutConfig | undefined;
        master: {
            widgets: string[];
            sizes: number[];
        } | undefined;
    }>;
    restore(value: PerspectiveWorkspaceConfig<string>): Promise<void>;
    _capture_widgets(): Generator<PerspectiveViewerWidget[], void, unknown>;
    _capture_viewers(): Generator<HTMLPerspectiveViewerElement[], void, unknown>;
    _restore_callback(viewers: Record<string, ViewerConfigUpdateExt>, starting_viewers: HTMLPerspectiveViewerElement[], starting_widgets: PerspectiveViewerWidget[], master: boolean, widgetName: string): PerspectiveViewerWidget;
    _validate(table: any): any;
    _set_listener(name: string, table: psp.Table | Promise<psp.Table>): void;
    _delete_listener(name: string): void;
    update_widget_for_viewer(viewer: HTMLPerspectiveViewerElement): void;
    remove_unslotted_widgets(viewers: HTMLPerspectiveViewerElement[]): void;
    update_details_panel(viewers: HTMLPerspectiveViewerElement[]): void;
    /***************************************************************************
     *
     * Workspace-level contextmenu actions
     *
     */
    duplicate(widget: PerspectiveViewerWidget): Promise<void>;
    toggleMasterDetail(widget: PerspectiveViewerWidget): void;
    _maximize(widget: PerspectiveViewerWidget): void;
    _unmaximize(): void;
    toggleSingleDocument(widget: PerspectiveViewerWidget): void;
    _filterViewer(viewer: HTMLPerspectiveViewerElement, filters: [string, string, string][], candidates: Set<string>): Promise<void>;
    onPerspectiveSelect(event: CustomEvent): Promise<void>;
    makeMaster(widget: PerspectiveViewerWidget): Promise<void>;
    makeDetail(widget: PerspectiveViewerWidget): void;
    /***************************************************************************
     *
     * Context Menu
     *
     */
    createContextMenu(widget: PerspectiveViewerWidget | null): WorkspaceMenu;
    showContextMenu(widget: PerspectiveViewerWidget | null, event: MouseEvent): void;
    /***************************************************************************
     *
     * Context Menu
     *
     */
    clearLayout(): void;
    setupMasterPanel(sizes: number[]): void;
    addViewer(config: ViewerConfigUpdateExt, is_global_filter?: boolean): void;
    /*********************************************************************
     * Widget helper methods
     */
    _createWidgetAndNode({ config, slot: slotname, }: {
        config: ViewerConfigUpdateExt;
        slot?: string;
    }): PerspectiveViewerWidget;
    _gen_id(): string;
    _createNode(slotname?: string): HTMLElement;
    _createWidget({ config, elem, viewer, }: {
        config: ViewerConfigUpdateExt;
        elem?: Element;
        viewer: HTMLPerspectiveViewerElement;
    }): PerspectiveViewerWidget;
    _addWidgetEventListeners(widget: PerspectiveViewerWidget): void;
    getWidgetByName(name: string): PerspectiveViewerWidget | null;
    getAllWidgets(): PerspectiveViewerWidget[];
    /***************************************************************************
     *
     * `workspace-layout-update` event
     *
     */
    workspaceUpdated(): Promise<void>;
}
